@startuml
' page 1x4

' trying to separate into different pages
Core --> Common
Core --> Config
Core --> Resources
Core --> Volumes
Core --> "Selection & Affinity"
Core --> Probes
Jobs --> Core
Core --> "Authentication & Authorizations"
Services --> Core
"External Access" --> Services
"Network Policies" --> "External Access"
CLI --> "Authentication & Authorizations"

package "Common" #dfe0d0 {
class K8sSpec{
apiVersion
kind
metadata
}

class K8sObject{
name: string
namespace: string
status
spec: Class
}
}

package "Core" #f7e58c {


class Node [[https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/node-v1/]] {
name: string
labels: Map<String,String>
taints: Taint[]
}

class Namespace [[https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/namespace-v1/]]{}

class Pod [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/]]{
containers: Class<Container>[]
initContainers: Class<Container>[]
volumes: Volume[]
securityContext: PodSecurityContext
serviceAccountName: string
tolerations: Toleration[]
nodeSelector: Map<String,String>
affinity: Affinity
}
Pod --> RestartPolicy: restartPolicy
enum RestartPolicy{
    Always *
    OnFailure
    Never
}

class ReplicaSet [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/replica-set-v1/]]{
selector: LabelSelector
template: Class<Pod>
replicas: integer
}

class Deployment [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/]]{
selector: LabelSelector
template: Class<Pod>
replicas: integer
}

Deployment o--> "1" ReplicaSet
Deployment --> "*" RolloutRevision
RolloutRevision --> ReplicaSet
ReplicaSet o--> "*" Pod
Pod --> "1..*" Node : deployed on
Pod o--> "*" Container

Deployment --> DeploymentStrategy: strategy
class DeploymentStrategy{

}
DeploymentStrategy --> DeploymentStrategyType: type
DeploymentStrategy --> RollingUpdateDeployment: rollingUpdate
note on link: if type corresponds

enum DeploymentStrategyType{
    RollingUdate
    Recreate
}
class RollingUpdateDeployment{
    maxSurge: integer
    maxUnavailable: integer
}

class RolloutRevision {
nb: integer
change-cause: string
}
note bottom: read-only, for history and rollback only


class Container [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container]]{
name: string
image: string
command: string[]
args: string[]
volumeMounts: VolumeMount[]
resources: ResourceRequirements
readinessProbe: Probe
livenessProbe: Probe
securityContext: SecurityContext
}

Container -->"*" ContainerPort: ports
Container --> ImagePullPolicy: imagePullPolicy

class ContainerPort{
    containerPort: integer
}

class EnvVar{
    name: string
    value: string
}
Container -->"*" EnvVar : env
class EnvVarSource{
}
EnvVar --> EnvVarSource: valueFrom
EnvVarSource --> KeyRef: configMapKeyRef
EnvVarSource --> KeyRef: secretKeyRef
EnvVarSource --> ObjectFieldSelector: fieldRef
class KeyRef{
    key: string
    name: string
    optional: boolean
}
class ObjectFieldSelector{
    fieldPath: string    
}

class EnvFromSource{

}
Container -->"*" EnvFromSource: envFrom
EnvFromSource --> EnvSource: configMapRef
EnvFromSource --> EnvSource: secretRef

class EnvSource{
    name: string
    optional: bollean
}

enum ImagePullPolicy{
    Always
    Never
    IfNotPresent
}

class StatefulSet [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/stateful-set-v1/]]{
serviceName: string
volumeClaimTemplate: Class<PersistentVolumeClaim>
}
enum PodManagementPolicy{
OrderedReady
Parallel
}
StatefulSet --> PodManagementPolicy: podManagementPolicy

}

package "Config" #d3f78c {

class ConfigMap [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/config-map-v1/]] {
data: Map<String,String>
}
class Secret [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/secret-v1/]] {
data: Map<String,String>
}

}

package "Authentication & Authorizations" #f7b08c{

class PodSecurityContext{
runAsUser: string
}
class SecurityContext{
runAsUser: string
capabilities: string[]
}


class Role [[https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-v1/]]{

}
class PolicyRule{
apiGroups: string[]
resources: string[]
verbs: string[]
resourceNames: string[]
}
Role --> "*" PolicyRule: rules
RoleBinding --> "*" Subject: subjects
RoleBinding --> RoleRef: roleRef
class RoleBinding [[https://kubernetes.io/docs/reference/kubernetes-api/authorization-resources/role-binding-v1/]] {}
class RoleRef{
kind: User, Group, Role
name
apiGroup
}
class Subject{
    namespace: string
}
Subject --|> RoleRef

class User{}
class Group{}

class ServiceAccount [[https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/service-account-v1/]] {
secrets: Object[]
}

class CertificateSigningRequest [[https://kubernetes.io/docs/reference/kubernetes-api/authentication-resources/certificate-signing-request-v1/]] {
groups: string[]
usages: string[]
request: string
}
}

package "Resources" #b6c1ed {

class ResourceRequirements{}

class ResourceDescription{
memory: string
cpu: string
}

ResourceRequirements --> "*" ResourceDescription: limits
ResourceRequirements --> "*" ResourceDescription: requests

}


package "Selection & Affinity" #daedb6{

class Taint{
key: string
value: string
}

enum TaintEffect{
NoSchedule
PreferNoSchedule
NoExecute
}

Taint --> TaintEffect: effect


class Toleration {
key: string
value: string
operator: Operator
}
Toleration --> TaintEffect: effect


class Affinity{}
class NodeAffinity{}

Affinity --> NodeAffinity: nodeAffinity

NodeAffinity --> NodeSelectorTerms: requiredDuringSchedulingIgnoredDuringExecution
NodeAffinity --> NodeSelectorTerms: preferredDuringSchedulingIgnoredDuringExecution

class PodAffinityTerm{
topologyKey: string
labelSelector: LabelSelector
namespaceSelector: LabelSelector
}

class LabelSelector{
matchLabels: Map<string,string>
matchExpressions: 
}

class LabelSelectorRequirement{
key: string
operator: string
values: string[]
}
LabelSelector --> LabelSelectorRequirement: matchExpressions

}


package "Probes" #edb6c0 {
Probe --> HttpGetAction: httpGet
class Probe{
initialDelaySeconds: integer
periodSeconds: integer
failureTheshold: integer
}
class HttpGetAction{
path: string
port: integer
}

}


package "Jobs" #b6dced {


class Job [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/job-v1/]] {
template: Class<Pod>
completions: integer
parallelism: integer
backoffLimit: integer
}

class CronJob [[https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/cron-job-v1/]] {
schedule: string
jobTemplate: Class<Job>
}

CronJob o--> "*" Job

}



package "Services" #b6bfed {

abstract class Service [[https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/]] {
selector: Map<string,string>
}

enum ServiceType{
ClusterIP
NodePort
LoadBalancer
}
Service --> ServiceType: type


class ClusterIPService{
}
ClusterIPService --|> Service

class NodePortService{

}
NodePortService --> "1" ClusterIPService
NodePortService --|> Service

class LoadBalancerService{

}
LoadBalancerService --> "1" NodePortService
LoadBalancerService --|> Service

class ServicePort{
targetPort: integer
port: integer
nodePort: integer
}
note right of ServicePort::nodePort
    only if type NodePort
end note

Service -->"*" ServicePort: ports

}


package "External Access" #e5f287 {


class Ingress [[https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/]] {}
class IngressBackend{
name: string
port: PortNumber
}
Ingress --> IngressBackend: defaultBackend

enum IngressPathType{
Prefix
Exact
ImplementationSpecific
}


class IngressRule{
host: string [0..1]
}
Ingress ---> "*" IngressRule: rules

class HTTPIngressRuleValue{
path: string
}
IngressRule --> "*" HTTPIngressRuleValue: http
HTTPIngressRuleValue --> "1" IngressBackend: backend
HTTPIngressRuleValue --> IngressPathType: pathType
}


package "Network Policies" #edb6e9{


class NetworkPolicy [[https://kubernetes.io/docs/reference/kubernetes-api/policy-resources/network-policy-v1/]] {
    podSelector: LabelSelector
}
NetworkPolicy --> "*" NetworkPolicyIngressRule: ingress
NetworkPolicy --> "*" NetworkPolicyEgressRule: egress

NetworkPolicy --> "*" NetworkPolicyType: policyTypes

enum NetworkPolicyType{
Ingress
Egress
}


class NetworkPolicyIngressRule{
ports: NetworkPolicyPort[]
}
class NetworkPolicyEgressRule{
ports: NetworkPolicyPort[]
}

NetworkPolicyIngressRule -->"*" NetworkPolicyPeer: from
NetworkPolicyEgressRule -->"*" NetworkPolicyPeer: to

class NetworkPolicyPeer{
podSelector: LabelSelector
namespaceSelector: Selector
}

class NetworkPolicyPort{
    port: integer
    protocol: string
}
}


package "Volumes" #c8b6ed {

class Volume [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/]] {
name
... depends on volume type
}

class VolumeMount{
name: string
mountPath: string
subPath: string
}
VolumeMount -->"1" Volume

PersistentVolume -->"*" AccessMode: accessModes
PersistentVolume --> PVReclaimPolicy: persistentVolumeReclaimPolicy
class PersistentVolume [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-v1/]] {
... depends on PV type
}
enum AccessMode{
ReadWriteOnce
ReadWriteMany
ReadOnlyMany
}

class Capacity{
storage: MemoryType
}
enum PVReclaimPolicy{
Retain
Delete
Recycle
}

PersistentVolume -- PersistentVolumeClaim: mapped 1-1
class PersistentVolumeClaim [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/]] {
accessModes: AccessMode[]
resources: Resources
storageClassName: string
}

PersistentVolume --> Capacity: capacity


class StorageClass [[https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/storage-class-v1/]] {
provisioner: string
parameters: Object[]
}
StorageClass --> PersistentVolume
note on link
    creates 1 for each pod/deployment using a PVC
end note
}



package "CLI" #8ba4ed{

class KubeConfig{

}

class Context{
name: string
namespace: string
}


class ConfigUser{
name
}

class ConfigUserDef{
client-certificate
client-key
}


class ConfigCluster{
name
}

class ConfigClusterDef{
server: string
certificate-authority: string
certificate-authority-data: string
}
note bottom
    Either certificate-authority (path) 
    or certificate-authority-data (base64)
end note

KubeConfig -->"*" Context: contexts
KubeConfig -->"*" ConfigCluster: clusters
KubeConfig -->"*" ConfigUser: users

Context --> ConfigUser: user
Context --> ConfigCluster: cluster
ConfigCluster --> ConfigClusterDef: cluster

ConfigUser --> ConfigUserDef: user
}

@enduml

